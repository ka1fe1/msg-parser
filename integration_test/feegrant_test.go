package integration

import (
	"encoding/hex"
	"fmt"
	"github.com/kaifei-bianjie/msg-parser/codec"
	"github.com/kaifei-bianjie/msg-parser/utils"
)

func (s IntegrationTestSuite) TestFeegrant() {
	cases := []SubTest{
		{
			"GrantAllowance",
			GrantAllowance,
		},
		{
			"RevokeAllowance",
			RevokeAllowance,
		},
	}

	for _, t := range cases {
		s.Run(t.testName, func() {
			t.testCase(s)
		})
	}
}

func GrantAllowance(s IntegrationTestSuite) {
	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := codec.GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if feegrantDoc, ok := s.Feegrant.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(feegrantDoc))
		}
	}
}

func RevokeAllowance(s IntegrationTestSuite) {
	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := codec.GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if feegrantDoc, ok := s.Feegrant.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(feegrantDoc))
		}
	}
}
