package integration

import (
	"encoding/hex"
	"fmt"
	. "github.com/kaifei-bianjie/msg-parser/codec"
	"github.com/kaifei-bianjie/msg-parser/utils"
)

func (s IntegrationTestSuite) TestIdentity() {
	cases := []SubTest{
		{
			"TestCreateIdentity",
			createIdentity,
		},
	}

	for _, t := range cases {
		s.Run(t.testName, func() {
			t.testCase(s)
		})
	}
}

func createIdentity(s IntegrationTestSuite) {
	txBytes, err := hex.DecodeString("0a910b0a8e0b0a242f69726974616d6f642e6964656e746974792e4d73674372656174654964656e7469747912e50a0a20313830303030303030303030303030303030303030303030303030303030303912460a4230324342423035324146373635393630333538454643333042364334414542463739443830423941323233434342443332434146423333323042454232453034334110051a93092d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949444e4443434174716741774942416749422f7a414b4267677167527a5056514744645442494d513077437759445651514b4577525552564e554d526b770a4677594456515144457842305a584e304c6d56345957317762475575593239744d513877445159445651517145775a486233426f5a584978437a414a42674e560a42415954416b354d4d423458445449784d5449774d6a41794d6a637a4f466f58445449784d5441784d4445794d4445774d566f775344454e4d417347413155450a43684d45564556545644455a4d4263474131554541784d516447567a6443356c654746746347786c4c6d4e76625445504d413047413155454b684d47523239770a614756794d517377435159445651514745774a4f5444425a4d424d4742797147534d34394167454743437142484d39564159497441304941424d7577557139320a575741316a7677777473537576336e5943356f69504d76544c4b2b7a4d6776724c675136486f44733644784e526165443539673579566a486a7a6d664f47396e0a7167367364464e4f482f6864726c436a6767477a4d494942727a414f42674e56485138424166384542414d43416751774a6759445652306c42423877485159490a4b7759424251554841774947434373474151554642774d424267497141775944675173424d41384741315564457745422f7751464d414d4241663877587759490a4b7759424251554841514545557a42524d434d474343734741515546427a41426868646f644852774f69387662324e7a6343356c654746746347786c4c6d4e760a62544171426767724267454642516377416f59656148523063446f764c324e796443356c654746746347786c4c6d4e766253396a5954457559334a304d4559470a413155644551512f4d4432434548526c633351755a586868625842735a53356a62323242455764766347686c636b426e62327868626d637562334a6e6877522f0a4141414268784167415568674141416741514141414141414141426f4d41384741315564494151494d415977424159434b674d774b6759445652306542434d770a496141664d4136434443356c654746746347786c4c6d4e766254414e6767746c654746746347786c4c6d4e766254425842674e56485238455544424f4d4357670a493641686868396f644852774f69387659334a734d53356c654746746347786c4c6d4e766253396a5954457559334a734d435767493641686868396f644852770a4f69387659334a734d69356c654746746347786c4c6d4e766253396a5954457559334a734d42594741796f44424151505a586830636d45675a5868305a57357a0a615739754d413047413155644467514742415145417749424d416f4743437142484d395641594e31413067414d455543494433367a2b47784e366973734978470a4f54763970486f374f2b54716a69626e4655384d42586849556a6b7341694541336c66696a31635949326d437a4f6f652b2f754f466777577233474a634f506f0a774239352f4330325976633d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d220c43726564656e7469616c73312a2a696161316b3233743973356c366e687a347872683075763866646735676434616434786661646464663032297b22686561646572223a7b22696e666f223a2274686973206973206120746573742063617365227d7d12600a4b0a400a192f636f736d6f732e63727970746f2e736d322e5075624b657912230a2102566dea1455647ea62f40f22f93281d364efcac0015f7cd1b1c2368213675b11812040a02080118c70f12110a0b0a05706f696e741202353010c0843d1a404ed25e2cb65545f7a2b8b7de50429b9512f37fd451edca0de7cc915476aab2c675fdaf97646ce671e88374bc4b3a48427345b2615b02e57008e6e4d44b93ca9c")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if createIdentityDoc, ok := s.Identity.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(createIdentityDoc))
		}
	}
}
